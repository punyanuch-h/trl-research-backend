package auth

import (
	"fmt"
	"net/http"
	"os"
	"strconv"
	"time"

	"trl-research-backend/internal/repository"
	"trl-research-backend/internal/utils"

	"github.com/gin-gonic/gin"
)

// LoginHandler ‡∏£‡∏ß‡∏° repository ‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á admin ‡πÅ‡∏•‡∏∞ researcher
type LoginHandler struct {
	AdminRepo      *repository.AdminRepo
	ResearcherRepo *repository.ResearcherRepo
}

// LoginRequest ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å frontend
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Login ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
func (h *LoginHandler) Login(c *gin.Context) {
	var req LoginRequest
	if err := c.ShouldBindJSON(&req); err != nil || req.Email == "" || req.Password == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid request"})
		return
	}

	fmt.Printf("üîç Login attempt: %s\n", req.Email)

	var userID, userEmail, userRole string

	// 1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á Admin ‡∏Å‡πà‡∏≠‡∏ô
	admin, errA := h.AdminRepo.Login(req.Email, req.Password)
	fmt.Println("admin", admin)
	fmt.Println("errA", errA)
	if errA == nil && admin != nil {
		userID = admin.AdminID
		userEmail = admin.AdminEmail
		userRole = "admin"
	}

	// 2Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô admin ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Å researcher
	if userRole == "" {
		researcher, errR := h.ResearcherRepo.Login(req.Email, req.Password)
		fmt.Println("researcher", researcher)
		fmt.Println("errR", errR)
		if errR == nil && researcher != nil {
			userID = researcher.ResearcherID
			userEmail = researcher.ResearcherEmail
			userRole = "researcher"
		}
	}

	// 3Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
	if userRole == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "invalid credentials"})
		return
	}

	fmt.Printf("‚úÖ Verified user: %s (role: %s)\n", userEmail, userRole)

	// 4Ô∏è‚É£ ‡πÇ‡∏´‡∏•‡∏î key provider ‡∏à‡∏≤‡∏Å environment
	kp, err := utils.NewEnvKeyProvider()
	if err != nil {
		fmt.Println("‚ùå key provider init failed:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "internal key provider error"})
		return
	}

	// 5Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
	expH, _ := strconv.Atoi(os.Getenv("JWT_EXPIRY"))
	if expH <= 0 {
		expH = 24
	}

	token, err := utils.GenerateJWT(
		userID,        // user id
		userEmail,     // email
		userRole,      // role (admin/researcher)
		"", "",        // clientID, clientName (optional)
		os.Getenv("JWT_ISSUER"),
		os.Getenv("JWT_AUDIENCE"),
		"v1",          // key id
		time.Duration(expH),
		*kp,
	)
	if err != nil {
		fmt.Println("‚ùå failed to generate token:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "cannot generate token"})
		return
	}

	// 6Ô∏è‚É£ ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	c.JSON(http.StatusOK, gin.H{
		"token":      token,
		"expires_in": expH,
		"role":       userRole,
	})
}
